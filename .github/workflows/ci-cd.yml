# .github/workflows/ci-cd.yml
name: Library Management System CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9, '3.10', 3.11]

    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov flake8
    
    - name: Lint with flake8
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics
    
    - name: Test with pytest
      run: |
        python -m pytest tests/ -v --cov=. --cov-report=xml
      continue-on-error: true
    
    - name: Test Flask App
      run: |
        python -c "from app import app; print('Flask app imports successfully')"
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        files: ./coverage.xml
        fail_ci_if_error: false

  build:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Create deployment package
      run: |
        mkdir -p dist
        tar -czf dist/library-management-system.tar.gz app.py templates/ requirements.txt
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: library-management-system
        path: dist/

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: library-management-system
        path: dist/
    
    - name: Deploy to production (placeholder)
      run: |
        echo "Deploying to production server..."
        echo "This is where you would deploy to your production environment"
        echo "For example: scp, rsync, docker push, kubectl apply, etc."
        # Example deployment commands:
        # scp dist/library-management-system.tar.gz user@server:/path/to/deploy/
        # ssh user@server 'cd /path/to/deploy && tar -xzf library-management-system.tar.gz'
        # docker build -t library-management-system:latest .
        # docker push your-registry/library-management-system:latest